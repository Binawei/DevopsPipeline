name: Setup and Deploy Project

on:
  workflow_call:
    inputs:
      project_name:
        required: true
        type: string
      app_type:
        required: true
        type: string
      aws_region:
        required: false
        type: string
        default: "us-east-1"
      enable_database:
        required: false
        type: boolean
        default: false
      database_type:
        required: false
        type: string
        default: "postgres"
      database_instance_class:
        required: false
        type: string
        default: "db.t3.micro"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      EC2_SSH_KEY:
        required: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production-approval
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      if: inputs.app_type == 'java-spring-boot'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Node.js
      if: inputs.app_type == 'react-frontend' || inputs.app_type == 'node-backend'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Run tests (Java)
      if: inputs.app_type == 'java-spring-boot'
      run: ./mvnw clean test
    
    - name: Build application (Java)
      if: inputs.app_type == 'java-spring-boot'
      run: ./mvnw clean package -DskipTests
    
    - name: Install dependencies (Node)
      if: inputs.app_type == 'react-frontend' || inputs.app_type == 'node-backend'
      run: npm ci
    
    - name: Run tests (Node)
      if: inputs.app_type == 'react-frontend' || inputs.app_type == 'node-backend'
      run: npm test -- --coverage --watchAll=false
    
    - name: Build application (React)
      if: inputs.app_type == 'react-frontend'
      run: npm run build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.aws_region }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names ${{ inputs.project_name }} || aws ecr create-repository --repository-name ${{ inputs.project_name }}
        
        # Build and push image
        docker build -t $ECR_REGISTRY/${{ inputs.project_name }}:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/${{ inputs.project_name }}:$IMAGE_TAG $ECR_REGISTRY/${{ inputs.project_name }}:latest
        docker push $ECR_REGISTRY/${{ inputs.project_name }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ inputs.project_name }}:latest
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Deploy infrastructure with Terraform
      env:
        TF_VAR_project_name: ${{ inputs.project_name }}
        TF_VAR_app_type: ${{ inputs.app_type }}
        TF_VAR_aws_region: ${{ inputs.aws_region }}
        TF_VAR_enable_database: ${{ inputs.enable_database }}
        TF_VAR_database_type: ${{ inputs.database_type }}
        TF_VAR_database_instance_class: ${{ inputs.database_instance_class }}
      run: |
        cd devops/terraform
        terraform init
        terraform plan
        terraform apply -auto-approve
        
        # Get outputs
        echo "LOAD_BALANCER_DNS=$(terraform output -raw load_balancer_dns)" >> $GITHUB_ENV
        echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
    
    - name: Check if instances already exist
      run: |
        # Check for existing EC2 instances with our tag
        EXISTING_INSTANCES=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=${{ inputs.project_name }}-instance" "Name=instance-state-name,Values=running" \
          --query 'Reservations[].Instances[].InstanceId' \
          --output text 2>/dev/null || echo "")
        
        echo "Existing instances: $EXISTING_INSTANCES"
        
        if [ -n "$EXISTING_INSTANCES" ] && [ "$EXISTING_INSTANCES" != "None" ]; then
          echo "Found existing instances, will use them for deployment"
        else
          echo "No existing instances, Terraform will create new ones"
        fi
    

    
    - name: Get running EC2 instances
      run: |
        # Wait for direct EC2 instances to be running
        for i in {1..10}; do
          echo "Attempt $i: Checking direct EC2 instances..."
          
          # Get instances by tag
          RUNNING_INSTANCES=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${{ inputs.project_name }}-instance" "Name=instance-state-name,Values=running" \
            --query 'Reservations[].Instances[].InstanceId' \
            --output text 2>/dev/null || echo "")
          
          echo "Running instances: $RUNNING_INSTANCES"
          
          if [ -n "$RUNNING_INSTANCES" ] && [ "$RUNNING_INSTANCES" != "None" ]; then
            echo "$RUNNING_INSTANCES" > /tmp/instance_ids.txt
            break
          fi
          
          echo "Waiting for instances to be running..."
          sleep 30
        done
        
        if [ ! -f /tmp/instance_ids.txt ]; then
          echo "No running instances found after retries"
          exit 1
        fi
        
        echo "Found running instances: $(cat /tmp/instance_ids.txt)"
    
    - name: Setup SSH key for Ansible
      run: |
        # Get SSH private key from Terraform output
        cd devops/terraform
        terraform output -raw ssh_private_key > /tmp/ssh_key.pem
        chmod 600 /tmp/ssh_key.pem
        
        # Get instance IPs
        INSTANCE_IDS=$(cat /tmp/instance_ids.txt)
        INSTANCE_IPS=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_IDS \
          --query 'Reservations[].Instances[].PublicIpAddress' \
          --output text)
        
        echo "Instance IPs: $INSTANCE_IPS"
        
        # Create Ansible directory and inventory
        mkdir -p devops/ansible
        echo "[production]" > devops/ansible/inventory
        for ip in $INSTANCE_IPS; do
          echo "$ip ansible_user=ec2-user ansible_ssh_private_key_file=/tmp/ssh_key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> devops/ansible/inventory
        done
        
        echo "Generated inventory:"
        cat devops/ansible/inventory
    
    - name: Deploy via direct SSH
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get instance IPs
        INSTANCE_IDS=$(cat /tmp/instance_ids.txt)
        INSTANCE_IPS=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_IDS \
          --query 'Reservations[].Instances[].PublicIpAddress' \
          --output text)
        
        echo "Deploying to IPs: $INSTANCE_IPS"
        
        # Deploy to each instance via SSH
        for ip in $INSTANCE_IPS; do
          echo "Deploying to $ip..."
          
          # Try SSH deployment (skip if SSH key doesn't work)
          ssh -i /tmp/ssh_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 ec2-user@$ip << EOF || echo "SSH failed for $ip, skipping..."
            # Login to ECR
            aws ecr get-login-password --region ${{ inputs.aws_region }} | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # Stop existing container
            docker stop ${{ inputs.project_name }} || true
            docker rm ${{ inputs.project_name }} || true
            
            # Pull and run new container
            docker pull $ECR_REGISTRY/${{ inputs.project_name }}:$IMAGE_TAG
            docker run -d --name ${{ inputs.project_name }} -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=production \
              -e PROJECT_NAME=${{ inputs.project_name }} \
              -e AWS_REGION=${{ inputs.aws_region }} \
              --restart unless-stopped \
              $ECR_REGISTRY/${{ inputs.project_name }}:$IMAGE_TAG
            
            echo "Deployment completed on $ip"
EOF
        done
    
    - name: Output deployment info
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Application URL: http://${{ env.LOAD_BALANCER_DNS }}"
        echo "📦 Docker Image: ${{ env.ECR_REPOSITORY_URL }}:${{ github.sha }}"