name: Rollback ECS Deployment

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Project name'
        required: true
        type: string
      rollback_type:
        description: 'Type of rollback'
        required: true
        type: choice
        options:
          - 'application'
          - 'infrastructure'
          - 'database'
          - 'full'
      target_commit:
        description: 'Target commit SHA for application rollback (leave empty for previous)'
        required: false
        type: string
      aws_region:
        description: 'AWS Region'
        required: false
        type: string
        default: 'us-east-1'
      confirm_rollback:
        description: 'Type "CONFIRM" to proceed with rollback'
        required: true
        type: string

jobs:
  rollback:
    runs-on: ubuntu-latest
    environment: production-approval

    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm_rollback }}" != "CONFIRM" ]; then
            echo "‚ùå Rollback not confirmed. Please type 'CONFIRM' to proceed."
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: ECS Application Rollback
        if: contains(github.event.inputs.rollback_type, 'application') || github.event.inputs.rollback_type == 'full'
        run: |
          echo "üîÑ Starting ECS application rollback..."
          
          # Get ECS cluster and service names
          CLUSTER_NAME="${{ github.event.inputs.project_name }}-cluster"
          SERVICE_NAME="${{ github.event.inputs.project_name }}-service"
          
          # Get target image tag
          if [ -n "${{ github.event.inputs.target_commit }}" ]; then
            TARGET_TAG="${{ github.event.inputs.target_commit }}"
          else
            # Get previous image from ECR
            TARGET_TAG=$(aws ecr describe-images --repository-name ${{ github.event.inputs.project_name }} \
              --query 'sort_by(imageDetails,&imagePushedAt)[-2].imageTags[0]' \
              --output text)
          fi
          
          echo "Rolling back to image tag: $TARGET_TAG"
          
          # Get ECR registry URL
          ECR_REGISTRY=$(aws ecr describe-registry --query 'registryId' --output text).dkr.ecr.${{ github.event.inputs.aws_region }}.amazonaws.com
          
          # Get current task definition
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query 'services[0].taskDefinition' \
            --output text)
          
          echo "Current task definition: $CURRENT_TASK_DEF"
          
          # Get task definition details
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition $CURRENT_TASK_DEF \
            --query 'taskDefinition' \
            --output json)
          
          # Update image URI in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/${{ github.event.inputs.project_name }}:$TARGET_TAG" \
            '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEFINITION | aws ecs register-task-definition \
            --cli-input-json file:///dev/stdin \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "New rollback task definition: $NEW_TASK_DEF_ARN"
          
          # Update ECS service with rollback task definition
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF_ARN
          
          # Wait for rollback deployment to complete
          echo "Waiting for ECS service rollback to stabilize..."
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME
          
          echo "‚úÖ ECS application rollback completed"

      - name: Database Rollback
        if: contains(github.event.inputs.rollback_type, 'database') || github.event.inputs.rollback_type == 'full'
        run: |
          echo "üîÑ Starting database rollback..."
          
          # Get RDS instance identifier
          DB_INSTANCE=$(aws rds describe-db-instances \
            --query 'DBInstances[?contains(DBInstanceIdentifier, `${{ github.event.inputs.project_name }}`)].DBInstanceIdentifier' \
            --output text)
          
          if [ -n "$DB_INSTANCE" ]; then
            # Get latest automated backup
            SNAPSHOT_ID=$(aws rds describe-db-snapshots \
              --db-instance-identifier "$DB_INSTANCE" \
              --snapshot-type automated \
              --query 'sort_by(DBSnapshots,&SnapshotCreateTime)[-1].DBSnapshotIdentifier' \
              --output text)
          
            echo "Found snapshot: $SNAPSHOT_ID"
            echo "‚ö†Ô∏è  Database rollback requires manual intervention due to data loss risk"
            echo "To restore from snapshot, run:"
            echo "aws rds restore-db-instance-from-db-snapshot --db-instance-identifier ${{ github.event.inputs.project_name }}-restored --db-snapshot-identifier $SNAPSHOT_ID"
          else
            echo "No RDS instance found for project: ${{ github.event.inputs.project_name }}"
          fi

      - name: Infrastructure Rollback
        if: contains(github.event.inputs.rollback_type, 'infrastructure') || github.event.inputs.rollback_type == 'full'
        run: |
          echo "üîÑ Starting infrastructure rollback..."
          
          # Setup Terraform
          cd devops/terraform
          terraform init
          
          # Get previous Terraform state
          echo "Current Terraform state:"
          terraform show
          
          echo "‚ö†Ô∏è  Infrastructure rollback requires manual review"
          echo "To rollback infrastructure changes:"
          echo "1. Review terraform plan with previous configuration"
          echo "2. Run terraform apply with previous .tfvars"
          echo "3. Or run terraform destroy to remove all resources"

      - name: Verify ECS Rollback
        run: |
          echo "üîç Verifying ECS rollback..."
          
          # Get load balancer DNS
          LB_DNS=$(aws elbv2 describe-load-balancers \
            --names ${{ github.event.inputs.project_name }}-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text 2>/dev/null || echo "")
          
          if [ -n "$LB_DNS" ]; then
            echo "Testing application health at: http://$LB_DNS"
          
            # Wait for application to be ready
            for i in {1..10}; do
              if curl -f "http://$LB_DNS/actuator/health" > /dev/null 2>&1; then
                echo "‚úÖ Application is healthy after rollback"
                break
              fi
              echo "Waiting for application... ($i/10)"
              sleep 30
            done
          fi
          
          # Get ECS service status
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster ${{ github.event.inputs.project_name }}-cluster \
            --services ${{ github.event.inputs.project_name }}-service \
            --query 'services[0].status' \
            --output text)
          
          echo "ECS Service Status: $SERVICE_STATUS"
          
          # Get running task count
          RUNNING_TASKS=$(aws ecs describe-services \
            --cluster ${{ github.event.inputs.project_name }}-cluster \
            --services ${{ github.event.inputs.project_name }}-service \
            --query 'services[0].runningCount' \
            --output text)
          
          echo "Running Tasks: $RUNNING_TASKS"
          
          echo "üéâ ECS rollback verification completed"
          echo "üåê Application URL: http://$LB_DNS"
          echo "üöÄ ECS Cluster: ${{ github.event.inputs.project_name }}-cluster"
          echo "‚öôÔ∏è ECS Service: ${{ github.event.inputs.project_name }}-service"